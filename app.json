// Importeer de benodigde modules van React en React Native
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  SafeAreaView,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  Alert, // Gebruik Alert voor eenvoudige meldingen, geen window.alert
} from 'react-native';
import { StatusBar } from 'expo-status-bar';

// Importeer Firebase en Firestore modules
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  signInAnonymously,
   onAuthStateChanged,
  signInWithCustomToken,
} from 'firebase/auth';
import {
  getFirestore,
  doc,
  setDoc,
  getDoc,
  collection,
  addDoc,
  query,
  onSnapshot,
  orderBy,
} from 'firebase/firestore';

// Zorg ervoor dat deze globale variabelen beschikbaar zijn in de Gitpod-omgeving
// Ze worden automatisch ingevuld door Gitpod.
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Initialiseer Firebase buiten de component om herinitialisatie te voorkomen
let app, db, auth;
try {
  app = initializeApp(firebaseConfig);
  db = getFirestore(app);
  auth = getAuth(app);
} catch (error) {
  console.error("Firebase initialisatie mislukt:", error);
  // In een echte app zou je hier een gebruikersvriendelijke foutmelding tonen
}

// Hoofdcomponent van de app
export default function App() {
  const [chatHistory, setChatHistory] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false); // Om te controleren of auth klaar is

  // Effect voor Firebase authenticatie en Firestore setup
  useEffect(() => {
    const setupFirebase = async () => {
      try {
        // Meld anoniem aan als er geen initiële token is, anders gebruik de token
        if (initialAuthToken) {
          await signInWithCustomToken(auth, initialAuthToken);
        } else {
          await signInAnonymously(auth);
        }

        // Luister naar authenticatiestatusveranderingen
        const unsubscribeAuth = onAuthStateChanged(auth, (user) => {
          if (user) {
            setUserId(user.uid);
            setIsAuthReady(true);
            console.log("Firebase geauthenticeerd. Gebruikers-ID:", user.uid);
          } else {
            setUserId(null);
            setIsAuthReady(true);
            console.log("Firebase niet geauthenticeerd.");
          }
        });

        return () => unsubscribeAuth(); // Schoon de auth listener op bij unmount
      } catch (error) {
        console.error("Fout bij Firebase authenticatie:", error);
        // Toon een melding aan de gebruiker
        Alert.alert("Fout", "Kon niet aanmelden bij Firebase. Probeer het opnieuw.");
        setIsAuthReady(true); // Stel klaar in geval van fout om UI niet te blokkeren
      }
    };

    if (auth) {
      setupFirebase();
    }
  }, []); // Lege dependency array betekent dat dit effect slechts één keer wordt uitgevoerd

  // Effect voor het laden en luisteren naar chatgeschiedenis
  useEffect(() => {
    if (!isAuthReady || !userId || !db) {
      console.log("Wachten op Firebase authenticatie of Firestore DB.");
      return;
    }

    // Pad naar de publieke chatcollectie
    const chatCollectionRef = collection(db, `artifacts/${appId}/public/data/chatMessages`);
    const q = query(chatCollectionRef, orderBy('timestamp'));

    const unsubscribeFirestore = onSnapshot(q, (snapshot) => {
      const messages = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        // Zorg ervoor dat timestamp een Date object is voor sortering, indien nodig
        timestamp: doc.data().timestamp?.toDate ? doc.data().timestamp.toDate() : new Date(),
      }));
      setChatHistory(messages);
      console.log("Chatgeschiedenis geladen:", messages.length, "berichten.");
    }, (error) => {
      console.error("Fout bij het laden van chatgeschiedenis:", error);
      Alert.alert("Fout", "Kon chatgeschiedenis niet laden.");
    });

    return () => unsubscribeFirestore(); // Schoon de Firestore listener op bij unmount
  }, [isAuthReady, userId, db]); // Herhaal dit effect wanneer auth of userId verandert

  // Functie om een bericht te versturen
  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading || !userId) {
      return;
    }

    setIsLoading(true);
    const userMessage = {
      text: inputMessage.trim(),
      sender: userId, // Gebruik de Firebase UID als afzender
      timestamp: new Date(),
      type: 'user',
    };

    try {
      // Voeg gebruikersbericht toe aan Firestore
      await addDoc(collection(db, `artifacts/${appId}/public/data/chatMessages`), userMessage);
      setInputMessage(''); // Maak invoerveld leeg

      // Roep de Gemini API aan
      const prompt = userMessage.text;
      const chatHistoryForGemini = chatHistory.map(msg => ({
        role: msg.sender === userId ? "user" : "model",
        parts: [{ text: msg.text }]
      }));
      chatHistoryForGemini.push({ role: "user", parts: [{ text: prompt }] });

      const payload = { contents: chatHistoryForGemini };
      const apiKey = ""; // Canvas vult dit automatisch in
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Gemini API fout:", errorData);
        throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || response.statusText}`);
      }

      const result = await response.json();
      const geminiText = result.candidates?.[0]?.content?.parts?.[0]?.text || "Geen antwoord ontvangen.";

      const geminiMessage = {
        text: geminiText,
        sender: 'AI Gids',
        timestamp: new Date(),
        type: 'ai',
      };

      // Voeg AI-antwoord toe aan Firestore
      await addDoc(collection(db, `artifacts/${appId}/public/data/chatMessages`), geminiMessage);

    } catch (error) {
      console.error("Fout bij het versturen van bericht of Gemini API:", error);
      Alert.alert("Fout", `Kon bericht niet versturen of AI-antwoord genereren: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  // Render de UI van de app
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar style="auto" />
      <View style={styles.header}>
        <Text style={styles.headerText}>MedinaNav AI Gids</Text>
        {userId && <Text style={styles.userIdText}>Gebruiker ID: {userId}</Text>}
      </View>

      <ScrollView
        style={styles.chatContainer}
        contentContainerStyle={styles.chatContentContainer}
        ref={scrollViewRef => {
          this.scrollViewRef = scrollViewRef;
        }}
        onContentSizeChange={() => this.scrollViewRef.scrollToEnd({ animated: true })}
      >
        {chatHistory.length === 0 && !isLoading && (
          <Text style={styles.welcomeText}>Welkom bij de MedinaNav AI Gids! Stel je vragen over Medina.</Text>
        )}
        {chatHistory.map((msg, index) => (
          <View
            key={msg.id || index}
            style={[
              styles.messageBubble,
              msg.sender === userId ? styles.userBubble : styles.aiBubble,
            ]}
          >
            <Text style={styles.senderText}>
              {msg.sender === userId ? 'Jij' : 'AI Gids'}:
            </Text>
            <Text style={styles.messageText}>{msg.text}</Text>
            <Text style={styles.timestampText}>
              {new Date(msg.timestamp).toLocaleTimeString()}
            </Text>
          </View>
        ))}
        {isLoading && (
          <View style={styles.loadingBubble}>
            <ActivityIndicator size="small" color="#007AFF" />
            <Text style={styles.loadingText}>AI Gids denkt na...</Text>
          </View>
        )}
      </ScrollView>

      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.inputContainer}
      >
        <TextInput
          style={styles.input}
          placeholder="Typ je vraag hier..."
          value={inputMessage}
          onChangeText={setInputMessage}
          editable={!isLoading}
        />
        <TouchableOpacity
          style={[styles.sendButton, isLoading && styles.sendButtonDisabled]}
          onPress={sendMessage}
          disabled={isLoading}
        >
          <Text style={styles.sendButtonText}>Verstuur</Text>
        </TouchableOpacity>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

// Stylesheet voor de componenten
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F0F2F5', // Lichte achtergrondkleur
  },
  header: {
    backgroundColor: '#007AFF', // Blauwe header
    padding: 15,
    paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight + 10 : 15, // Ruimte voor Android statusbalk
    alignItems: 'center',
    borderBottomLeftRadius: 15,
    borderBottomRightRadius: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 5,
  },
  headerText: {
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  userIdText: {
    color: '#E0E0E0',
    fontSize: 12,
  },
  chatContainer: {
    flex: 1,
    padding: 10,
  },
  chatContentContainer: {
    paddingBottom: 20, // Extra padding aan de onderkant
  },
  welcomeText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#666',
    marginTop: 20,
    paddingHorizontal: 20,
  },
  messageBubble: {
    maxWidth: '80%',
    padding: 12,
    borderRadius: 15,
    marginBottom: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  userBubble: {
    alignSelf: 'flex-end',
    backgroundColor: '#DCF8C6', // Lichtgroen voor gebruiker
    borderTopRightRadius: 5, // Kleinere radius aan de kant van de afzender
  },
  aiBubble: {
    alignSelf: 'flex-start',
    backgroundColor: '#FFFFFF', // Wit voor AI
    borderTopLeftRadius: 5, // Kleinere radius aan de kant van de afzender
  },
  senderText: {
    fontSize: 12,
    color: '#555',
    marginBottom: 3,
    fontWeight: 'bold',
  },
  messageText: {
    fontSize: 16,
    color: '#333',
  },
  timestampText: {
    fontSize: 10,
    color: '#888',
    marginTop: 5,
    textAlign: 'right',
  },
  loadingBubble: {
    alignSelf: 'flex-start',
    backgroundColor: '#E0E0E0',
    padding: 12,
    borderRadius: 15,
    marginBottom: 8,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  loadingText: {
    marginLeft: 10,
    color: '#555',
    fontStyle: 'italic',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 10,
    borderTopWidth: 1,
    borderTopColor: '#E0E0E0',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    paddingBottom: Platform.OS === 'ios' ? 20 : 10, // Extra padding voor iOS toetsenbord
  },
  input: {
    flex: 1,
    backgroundColor: '#F0F2F5',
    borderRadius: 25,
    paddingHorizontal: 15,
    paddingVertical: 10,
    fontSize: 16,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#D0D0D0',
  },
  sendButton: {
    backgroundColor: '#007AFF', // Blauwe verstuurknop
    borderRadius: 25,
    paddingVertical: 12,
    paddingHorizontal: 20,
    shadowColor: '#007AFF',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 5,
    elevation: 5,
  },
  sendButtonDisabled: {
    backgroundColor: '#A0C8FF', // Lichtere kleur als uitgeschakeld
  },
  sendButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
